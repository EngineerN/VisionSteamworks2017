CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
project(Vision2016)

SET(EXEC_NAME Vision2016)

# Set Cxx Standard for use.
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set Cuda Static Runtime to be off
SET(CUDA_USE_STATIC_CUDA_RUNTIME OFF)

if(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 OLD)
	cmake_policy(SET CMP0015 OLD)  
endif(COMMAND cmake_policy)

SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin")

IF(WIN32) # Windows
find_package(CUDA 7.0 REQUIRED)
ELSE() # Linux
find_package(CUDA 6.5 REQUIRED)
ENDIF(WIN32)
find_package(OpenCV 2.4 COMPONENTS core highgui imgproc features2d gpu REQUIRED)

include_directories(${CUDA_INCLUDE_DIRS})
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

link_directories(${CUDA_LIBRARY_DIRS})
link_directories(${OpenCV_LIBRARY_DIRS})
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib)

SET(SRC_FOLDER src)
FILE(GLOB_RECURSE SRC_FILES "${SRC_FOLDER}/*.cpp")
FILE(GLOB_RECURSE SRC_CU_FOLDER "${SRC_FOLDER}/*.cu")


#list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_20,code=sm_20)
#list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_20,code=sm_21)
list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_30)
list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_35)
list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_50,code=sm_50)
list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_50,code=sm_52)
list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_53,code=sm_53)



# Check and add warning flags
set(CLANG_WARNING_FLAGS -Wall -Wextra -pedantic)
set(GNU_WARNING_FLAGS -Wall -Wextra -pedantic)
add_compile_options("$<$<CXX_COMPILER_ID:Clang>:${CLANG_WARNING_FLAGS}>")
add_compile_options("$<$<CXX_COMPILER_ID:GNU>:${GNU_WARNING_FLAGS}>")

# Check and add compile flags
set(CLANG_COMPILER_FLAGS -O3)
set(GNU_COMPILER_FLAGS -O3)
add_compile_options("$<$<CXX_COMPILER_ID:Clang>:${CLANG_COMPILER_FLAGS}>")
add_compile_options("$<$<CXX_COMPILER_ID:GNU>:${GNU_COMPILER_FLAGS}>")

set(COMPILE_FLAGS -g)

cuda_add_executable(${EXEC_NAME} ${SRC_FILES} ${SRC_CU_FOLDER})
cuda_add_executable(${EXEC_NAME}-test ${SRC_FILES} ${SRC_CU_FOLDER})
SET_TARGET_PROPERTIES(${EXEC_NAME}-test PROPERTIES ${COMPILE_FLAGS} "-DSHOW")

TARGET_LINK_LIBRARIES(${EXEC_NAME}
			${OpenCV_LIBRARIES}
			${CUDA_LIBRARIES} ${CUDA_npps_LIBRARY}
			)

TARGET_LINK_LIBRARIES(${EXEC_NAME}-test
			${OpenCV_LIBRARIES}
			${CUDA_LIBRARIES} ${CUDA_npps_LIBRARY}
			)
